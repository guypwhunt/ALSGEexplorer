shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp('app (backup).R')
# final data  ################################################################
exprs_data <- readRDS("./data/gxprs_base_pheno_alt_names.rds")
# raw data  ################################################################
raw_data <- readRDS("./data/gxprs_raw_base_pheno_alt_names_md5.rds")
# raw data niave process: bk, log2, rsn  ################################################################
raw_data_bklogrsn <- readRDS("./data/gxprs_bklog2rsnCombat_347_31431.rds")
# limma results  ################################################################
limma_df <- readRDS("./data/MRC_LBB_Limma.rds")
limma_df_raw <- readRDS("./data/MRC_LBB_Raw_Limma.rds")
library(markdown)
head(exprs_data)
typeof(exprs_data)
class(exprs_data)
attributes(exprs_data)
exprs_data
as.data.frame(exprs_data)
class(exprs_data)
exprs_data$tbl
exprs_data$tbl_df
exprs_data$data.frame
write_csv(exprs_data, "test.csv")
runApp()
library(shiny)
library(ggplot2)
library(shinydashboard)
library(knitr)
library(rmarkdown)
library(ggthemes)
library(plotly)
library(DT)
library(data.table)
library(dplyr)
library(shinythemes)
library(RColorBrewer)
library(markdown)
write_csv(exprs_data, "test.csv")
class(raw_data)
class(raw_data_bklogrsn)
class(limma_df)
class(limma_df_raw)
my_df <- as.data.frame(exprs_data)
head(my_df)
my_df <- as.data.frame(limma_df)
head(limma_df)
my_df <- as.data.frame(limma_df)
head(my_df)
limma_df <- readRDS("./data/MRC_LBB_Limma.rds")
limmaDf <- as.data.frame(limma_df)
head(limmaDf)
write.csv(limmaDf, "limmaDf.csv")
limmaDfRaw <- as.data.frame(limma_df_raw)
head(limmaDfRaw)
limmaDfRaw <- as.data.frame(limma_df_raw)
head(limmaDfRaw)
write.csv(limmaDfRaw, "limmaDfRaw.csv")
rawDataBklogrsn <- as.data.frame(raw_data_bklogrsn)
head(rawDataBklogrsn)
library(shiny)
library(ggplot2)
library(shinydashboard)
library(knitr)
library(rmarkdown)
library(ggthemes)
library(plotly)
library(DT)
library(data.table)
library(dplyr)
library(shinythemes)
library(RColorBrewer)
library(markdown)
# final data  ################################################################
exprs_data <- readRDS("./data/gxprs_base_pheno_alt_names.rds")
exprsData <- as.data.frame(exprs_data)
write.csv(head(exprsData), "rawData.csv")
# raw data  ################################################################
raw_data <- readRDS("./data/gxprs_raw_base_pheno_alt_names_md5.rds")
rawData <- as.data.frame(raw_data)
write.csv(head(rawData), "rawData.csv")
# raw data niave process: bk, log2, rsn  ################################################################
raw_data_bklogrsn <- readRDS("./data/gxprs_bklog2rsnCombat_347_31431.rds")
rawDataBklogrsn <- as.data.frame(raw_data_bklogrsn)
head(rawDataBklogrsn)
write.csv(head(rawDataBklogrsn), "rawDataBklogrsn.csv")
# limma results  ################################################################
limma_df <- readRDS("./data/MRC_LBB_Limma.rds")
limmaDf <- as.data.frame(limma_df)
write.csv(head(limmaDf), "limmaDf.csv")
limma_df_raw <- readRDS("./data/MRC_LBB_Raw_Limma.rds")
limmaDfRaw <- as.data.frame(limma_df_raw)
write.csv(jhead(limmaDfRaw), "limmaDfRaw.csv")
write.csv(head(exprsData), "exprsData.csv")
library(shiny)
library(ggplot2)
library(shinydashboard)
library(knitr)
library(rmarkdown)
library(ggthemes)
library(plotly)
library(DT)
library(data.table)
library(dplyr)
library(shinythemes)
library(RColorBrewer)
library(markdown)
# final data  ################################################################
exprs_data <- readRDS("./data/gxprs_base_pheno_alt_names.rds")
exprsData <- as.data.frame(exprs_data)
write.csv(head(exprsData), "exprsData.csv")
# raw data  ################################################################
raw_data <- readRDS("./data/gxprs_raw_base_pheno_alt_names_md5.rds")
rawData <- as.data.frame(raw_data)
write.csv(head(rawData), "rawData.csv")
# raw data niave process: bk, log2, rsn  ################################################################
raw_data_bklogrsn <- readRDS("./data/gxprs_bklog2rsnCombat_347_31431.rds")
rawDataBklogrsn <- as.data.frame(raw_data_bklogrsn)
head(rawDataBklogrsn)
write.csv(head(rawDataBklogrsn), "rawDataBklogrsn.csv")
# limma results  ################################################################
limma_df <- readRDS("./data/MRC_LBB_Limma.rds")
limmaDf <- as.data.frame(limma_df)
write.csv(head(limmaDf), "limmaDf.csv")
limma_df_raw <- readRDS("./data/MRC_LBB_Raw_Limma.rds")
limmaDfRaw <- as.data.frame(limma_df_raw)
write.csv(head(limmaDfRaw), "limmaDfRaw.csv")
shiny::runApp()
experiment_info <- data.frame(
sample_id = factor(paste0("sample", 1:8)),
group_id = factor(rep(paste0("group", 1:2), each = 4)),
patient_id = factor(rep(paste0("patient", 1:4), 2)),
batch_id = factor(rep(paste0("batch", 1:2), 4)),
stringsAsFactors = FALSE
)
createDesignMatrix(experiment_info, cols_design = c("group_id", "patient_id", "batch_id"))
## app.R #####
library(shiny)
library(ggplot2)
library(shinydashboard)
library(knitr)
library(rmarkdown)
library(ggthemes)
library(plotly)
library(DT)
library(data.table)
library(dplyr)
library(shinythemes)
library(RColorBrewer)
library(markdown)
# final data  ################################################################
exprs_data <- readRDS("./data/combinedExpressionData.rds")
exprs_data$Dataset <- factor(exprs_data$Dataset)
# deseq results  ################################################################
deseq_df <- readRDS("./data/combinedResults.rds")
# adding html P.Value    adj.P.Val        B  ################################################################
deseq_df <- deseq_df %>%
mutate(logFC = round(logFC, 2)) %>%
mutate(FDR.P.value = signif(adj.P.Val, 3)) %>%
mutate(gene_symbol = gsub( " .*$", "", Gene)) %>%
mutate(
gene_URL = paste(
'<a href="http://www.genecards.org/cgi-bin/carddisp.pl?gene=',
gene_symbol,
' "target="_blank"',
'">',
gene_symbol,
'</a>',
sep = ""
)
) %>%
mutate(
entrez_id = paste(
'<a href="https://www.ncbi.nlm.nih.gov/gene/',
entrez_id,
' "target="_blank"',
'">',
entrez_id,
'</a>',
sep = ""
)
) %>%
dplyr::select(Dataset,
Gene,
gene_URL,
entrez_id,
logFC,
FDR.P.value)
# UI ####
# fonts https://fontawesome.com/ ####
#############
target <- "SLC4A1"
output$exprPlot <- renderPlotly({
cbbPalette <-
c(
"#D55E00",
"#009e73",
"#E69F00",
"#F0E442",
"#56B4E9",
"#0072B2",
"#009e73",
"#CC79A7",
"#000000"
)
gg <-
qplot(Phenotype,
eval(as.name(target)),
data = exprs_data,
fill = Phenotype,
ylab = NULL
) +
geom_boxplot() +
facet_grid(~ Dataset) +
#geom_point(position = position_jitterdodge(0.5)) +
#geom_smooth(method = NULL, na.rm = TRUE, se=TRUE, aes(group=1, fill=Dataset)) +
scale_fill_manual(values = cbbPalette) +
ylab("")
gg <- gg + theme_tufte()
p <- ggplotly(gg) %>%
layout(
showlegend = FALSE,
margin = list(p = 5),
yaxis = list(title = "Normalised Gene Expression")
)
p
})
output$table <- DT::renderDataTable({
ss <- subset(deseq_df, Gene == target)
## datatable
ss <-
datatable(ss, escape = FALSE, options = list(pageLength = 25))
ss
})
# full DESeq table #################################################################
output$fulltable <- DT::renderDataTable({
full_t <- datatable(
deseq_df,
escape = FALSE,
options = list(pageLength = 10,
autoWidth = TRUE),
filter = "top"
)
full_t
})
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(shinydashboard)
library(knitr)
library(rmarkdown)
library(ggthemes)
library(plotly)
library(DT)
library(data.table)
library(dplyr)
library(shinythemes)
library(RColorBrewer)
library(markdown)
library(biomaRt)
library(tibble)
# final data  ################################################################
# exprs_data <- readRDS("./data/gxprs_base_pheno_alt_names.rds")
# exprsData <- as.data.frame(exprs_data)
# write.csv(head(exprsData), "exprsData.csv")
# raw data  ################################################################
# raw_data <- readRDS("./data/gxprs_raw_base_pheno_alt_names_md5.rds")
# rawData <- as.data.frame(raw_data)
# write.csv(head(rawData), "rawData.csv")
# raw data niave process: bk, log2, rsn  ################################################################
# raw_data_bklogrsn <- readRDS("./data/gxprs_bklog2rsnCombat_347_31431.rds")
# rawDataBklogrsn <- as.data.frame(raw_data_bklogrsn)
# head(rawDataBklogrsn)
# write.csv(head(rawDataBklogrsn), "rawDataBklogrsn.csv")
# limma results  ################################################################
# limma_df <- readRDS("./data/MRC_LBB_Limma.rds")
# limmaDf <- as.data.frame(limma_df)
# write.csv(head(limmaDf), "limmaDf.csv")
# limma_df_raw <- readRDS("./data/MRC_LBB_Raw_Limma.rds")
# limmaDfRaw <- as.data.frame(limma_df_raw)
# write.csv(head(limmaDfRaw), "limmaDfRaw.csv")
########## ALS data
bbExperimentDesign <- read.table("data/Matrices/BBsamples.design.updated.sv1.171subjects.txt", sep = '\t', header = TRUE)
bbExpressionMatrix <- read.table("data/Matrices/BBNormMatrix.txt", sep = '\t', header = TRUE)
bbDEResults <- read.table("data/Matrices/BBgenesDEresOriginal171.txt", sep = '\t', header = TRUE)
taExperimentDesign <- read.table("data/Matrices/TargetAlssamples.design.updated.site.sv1.234subjects.txt", sep = '\t', header = TRUE)
taExpressionMatrix <- read.table("data/Matrices/TargetALSNormMatrix.txt", sep = '\t', header = TRUE)
taDEResults <- read.table("data/Matrices/TargetAlsgenesDEres234subjectsTargetALS_site.txt", sep = '\t', header = TRUE)
# Update the expression datasets column names
colnames(taExpressionMatrix) <- c("gene", head(colnames(taExpressionMatrix), -1))
# order the expression data and results by ensemble gene ID
taExpressionMatrix <- taExpressionMatrix[order(taExpressionMatrix[,"gene"]),]
taDEResults <- taDEResults[order(taDEResults[,"gene"]),]
bbExpressionMatrix[,"gene"] <- rownames(bbExpressionMatrix)
bbExpressionMatrix <- bbExpressionMatrix[order(bbExpressionMatrix[,"gene"]),]
bbDEResults[,"gene"] <- rownames(bbDEResults)
bbDEResults <- bbDEResults[order(bbDEResults[,"gene"]),]
# Check that the expression data and DE results are in the same order
all(taDEResults[,1] == taExpressionMatrix[,1])
all(bbExpressionMatrix[,"gene"] == bbDEResults[,"gene"])
### Identify gene symbols
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- taExpressionMatrix[,1]
BiocManager::install('grimbough/biomaRt')
